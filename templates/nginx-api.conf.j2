server {
    listen 80;
    server_name {{ api_domain }};

    # Security Headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # CORS configuration for API access
    location / {
        # Set allowed origins
        set $cors_origin "";
        if ($http_origin = "http://{{ domain }}") {
            set $cors_origin "http://{{ domain }}";
        }
        if ($http_origin = "https://{{ domain }}") {
            set $cors_origin "https://{{ domain }}";
        }
        if ($http_origin = "http://localhost:{{ fe_port }}") {
            set $cors_origin "http://localhost:{{ fe_port }}";
        }
        if ($http_origin = "https://localhost:{{ fe_port }}") {
            set $cors_origin "https://localhost:{{ fe_port }}";
        }
        # Allow any subdomain of the main domain
        if ($http_origin ~ "^https?://.*\.{{ domain }}$") {
            set $cors_origin $http_origin;
        }

        # Handle CORS preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $cors_origin;
            add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
            add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Origin,X-Forwarded-For';
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }

        # Add CORS headers for all requests
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Origin,X-Forwarded-For' always;
        add_header Access-Control-Expose-Headers 'Content-Length,Content-Range' always;

        # Proxy settings for backend API
        proxy_pass http://localhost:{{ be_port }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
        
        # Buffer settings for API responses
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
    }

    # API health check endpoint (optional)
    location /health {
        proxy_pass http://localhost:{{ be_port }}/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }

    # Logging
    access_log /var/log/nginx/{{ api_domain }}_access.log;
    error_log /var/log/nginx/{{ api_domain }}_error.log;
}
